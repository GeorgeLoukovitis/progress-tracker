[{"C:\\Users\\Programming\\Documents\\GitHub\\progress-tracker\\src\\index.js":"1","C:\\Users\\Programming\\Documents\\GitHub\\progress-tracker\\src\\App.js":"2","C:\\Users\\Programming\\Documents\\GitHub\\progress-tracker\\src\\components\\Home.js":"3","C:\\Users\\Programming\\Documents\\GitHub\\progress-tracker\\src\\components\\AllProjects.js":"4","C:\\Users\\Programming\\Documents\\GitHub\\progress-tracker\\src\\components\\ManageProject.js":"5","C:\\Users\\Programming\\Documents\\GitHub\\progress-tracker\\src\\components\\AwardMilestones.js":"6","C:\\Users\\Programming\\Documents\\GitHub\\progress-tracker\\src\\components\\Login.js":"7","C:\\Users\\Programming\\Documents\\GitHub\\progress-tracker\\src\\components\\MyProjects.js":"8","C:\\Users\\Programming\\Documents\\GitHub\\progress-tracker\\src\\components\\NewProjectForm.js":"9","C:\\Users\\Programming\\Documents\\GitHub\\progress-tracker\\src\\components\\Register.js":"10","C:\\Users\\Programming\\Documents\\GitHub\\progress-tracker\\src\\components\\ProjectScreen.js":"11","C:\\Users\\Programming\\Documents\\GitHub\\progress-tracker\\src\\components\\MyAchievements.js":"12","C:\\Users\\Programming\\Documents\\GitHub\\progress-tracker\\src\\utilities\\LoginService.js":"13","C:\\Users\\Programming\\Documents\\GitHub\\progress-tracker\\src\\components\\MyAppBar.js":"14","C:\\Users\\Programming\\Documents\\GitHub\\progress-tracker\\src\\components\\SideMenu.js":"15","C:\\Users\\Programming\\Documents\\GitHub\\progress-tracker\\src\\utilities\\ProjectService.js":"16"},{"size":212,"mtime":1655754301075,"results":"17","hashOfConfig":"18"},{"size":2219,"mtime":1662575942751,"results":"19","hashOfConfig":"18"},{"size":2803,"mtime":1664190147149,"results":"20","hashOfConfig":"18"},{"size":3347,"mtime":1655751783436,"results":"21","hashOfConfig":"18"},{"size":223,"mtime":1655754707220,"results":"22","hashOfConfig":"18"},{"size":14593,"mtime":1664280664947,"results":"23","hashOfConfig":"18"},{"size":2605,"mtime":1664187857490,"results":"24","hashOfConfig":"18"},{"size":2770,"mtime":1664190229144,"results":"25","hashOfConfig":"18"},{"size":15385,"mtime":1664276652670,"results":"26","hashOfConfig":"18"},{"size":2969,"mtime":1664188929326,"results":"27","hashOfConfig":"18"},{"size":3761,"mtime":1664189965300,"results":"28","hashOfConfig":"18"},{"size":3442,"mtime":1664273668591,"results":"29","hashOfConfig":"18"},{"size":2721,"mtime":1664189079104,"results":"30","hashOfConfig":"18"},{"size":1076,"mtime":1655752123913,"results":"31","hashOfConfig":"18"},{"size":775,"mtime":1662576341032,"results":"32","hashOfConfig":"18"},{"size":977,"mtime":1657452498819,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"joskuh",{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Programming\\Documents\\GitHub\\progress-tracker\\src\\index.js",[],[],"C:\\Users\\Programming\\Documents\\GitHub\\progress-tracker\\src\\App.js",[],[],"C:\\Users\\Programming\\Documents\\GitHub\\progress-tracker\\src\\components\\Home.js",["86"],[],"import {React, useState, useEffect} from 'react'\nimport { useNavigate } from \"react-router-dom\";\nimport { Box, Button, Card, CardContent, Container, CssBaseline, Drawer, List, ListItem, ListItemButton, ListItemText, ListSubheader, Stack } from '@mui/material';\nimport AddIcon from '@mui/icons-material/Add';\nimport MyAppBar from './MyAppBar'\nimport SideMenu from './SideMenu';\nimport {getToken, getUser, refresh} from \"../utilities/LoginService\"\n\nconst Home = () => {\n\n  const [isDrawerOpen, setDrawer] = useState(false);\n  const toggleDrawer = ()=>{\n    setDrawer(!isDrawerOpen)\n  }\n  \n  const navigate = useNavigate()\n  const [user, setLocalUser] = useState(getUser())\n  const [projects, setProjects] = useState([]);\n  useEffect(()=>{\n    refresh(setLocalUser)\n    fetch(\"http://localhost:8000/joinedProjects\",\n    {\n      mode: \"cors\",\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-access-token\": getToken(), \n        \"Access-Control-Allow-Origin\": \"*\"\n      },\n    })\n    .then((res)=>{\n      if(res.ok)\n      {\n        return res.json()\n      }\n      else\n      {\n        throw Error(\"Refresh Error\")\n      }\n      \n    })\n    .then((data)=>{\n      // console.log(\"Joined Projects\")\n      // console.log(data)\n      setProjects(data)\n    })\n    .catch((err)=>{\n      console.log(err.message)\n    })\n  },[])\n\n  return (\n    <div>\n      <CssBaseline></CssBaseline>\n      <MyAppBar title=\"Enrolled Projects\" toggleDrawer={toggleDrawer}></MyAppBar>\n      <Container maxWidth=\"sm\">\n        <Drawer\n          anchor={\"left\"}\n          open={isDrawerOpen}\n          onClose={toggleDrawer}\n        >\n          <SideMenu></SideMenu>\n        </Drawer>\n        <Box sx={{margin: 4,\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center', \n        }}>\n          <Card sx={{width:500}}>\n            <CardContent>\n              <List subheader={\n                <ListSubheader>Enrolled Projects</ListSubheader>\n              }>\n                {projects.map((project)=>(\n                  <ListItem disablePadding key={project._id}>\n                    <ListItemButton onClick={()=>{\n                      navigate(\"/projects/\"+project._id)\n                    }}>\n                      <ListItemText primary={project.title} />\n                    </ListItemButton>\n                  </ListItem>\n                ))}\n                \n              </List>\n              <Stack direction=\"row\" justifyContent=\"flex-end\">\n                <Button onClick={()=>navigate(\"/all-projects\")} variant=\"contained\" startIcon={<AddIcon />}>EnrolL</Button>\n              </Stack>\n            </CardContent>\n          </Card>\n        </Box>\n        \n        \n        \n      </Container>\n    </div>\n  )\n}\n\nexport default Home","C:\\Users\\Programming\\Documents\\GitHub\\progress-tracker\\src\\components\\AllProjects.js",[],[],"C:\\Users\\Programming\\Documents\\GitHub\\progress-tracker\\src\\components\\ManageProject.js",[],[],"C:\\Users\\Programming\\Documents\\GitHub\\progress-tracker\\src\\components\\AwardMilestones.js",["87","88"],[],"C:\\Users\\Programming\\Documents\\GitHub\\progress-tracker\\src\\components\\Login.js",[],[],"C:\\Users\\Programming\\Documents\\GitHub\\progress-tracker\\src\\components\\MyProjects.js",["89"],[],"import {React, useState, useEffect} from 'react'\nimport { useNavigate } from \"react-router-dom\";\nimport {Box, Button, Card, CardContent, CssBaseline, Drawer, List, ListItem, ListItemText, ListSubheader, Stack } from '@mui/material';\nimport AddIcon from '@mui/icons-material/Add';\nimport MyAppBar from './MyAppBar'\nimport SideMenu from './SideMenu';\nimport { getToken, getUser, refresh } from '../utilities/LoginService';\n\nconst MyProjects = () => {\n\n  const [isDrawerOpen, setDrawer] = useState(false);\n  const toggleDrawer = ()=>{\n    setDrawer(!isDrawerOpen)\n  }\n  const navigate = useNavigate()\n\n  const [user, setLocalUser] = useState(getUser())\n  const [projects, setProjects] = useState([]);\n\n  useEffect(()=>{\n    refresh(setLocalUser)\n    fetch(\"http://localhost:8000/myProjects\",\n    {\n      mode: \"cors\",\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-access-token\": getToken(), \n        \"Access-Control-Allow-Origin\": \"*\"\n      },\n    })\n    .then((res)=>{\n      if(res.ok)\n      {\n        return res.json()\n      }\n      else\n      {\n        throw Error(\"Refresh Error\")\n      }\n      \n    })\n    .then((data)=>{\n      // console.log(\"Joined Projects\")\n      // console.log(data)\n      setProjects(data)\n    })\n    .catch((err)=>{\n      console.log(err.message)\n    })\n  },[])\n\n  return (\n    <div>\n      <CssBaseline></CssBaseline>\n      <MyAppBar title=\"My Projects\" toggleDrawer={toggleDrawer}></MyAppBar>\n      <Drawer\n        anchor={\"left\"}\n        open={isDrawerOpen}\n        onClose={toggleDrawer}\n      >\n        <SideMenu></SideMenu>\n      </Drawer>\n      <Box sx={{margin: 4,\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center', \n      }}>\n        <Card sx={{width:500}}>\n          <CardContent>\n            <List subheader={\n              <ListSubheader>My Projects</ListSubheader>\n            }>\n              {\n                projects.map((project)=>(\n                  <ListItem key={project._id} secondaryAction={(\n                    <Stack direction=\"row\">\n                      <Button onClick={()=>{navigate(\"/award-milestones/\"+project._id)}}>Award Milestones</Button>\n                      {/* <Button onClick={()=>{navigate(\"/manage-projects/\"+project._id)}}>Manage</Button> */}\n                    </Stack>\n                  )}>\n                    <ListItemText primary={project.title}></ListItemText>\n                  </ListItem>\n                ))\n              }\n            </List>\n            <Button onClick={()=>{navigate(\"/create-project\")}} variant=\"contained\" startIcon={<AddIcon />}>Create Project</Button>\n          </CardContent>\n          \n        </Card>\n      </Box>\n    </div>\n  )\n}\n\nexport default MyProjects","C:\\Users\\Programming\\Documents\\GitHub\\progress-tracker\\src\\components\\NewProjectForm.js",["90"],[],"import React, {useEffect, useState} from 'react'\nimport { useNavigate } from 'react-router';\nimport {Box, Button, Card, CardActions, CardContent, Checkbox, CssBaseline, Divider, Drawer, IconButton, List, ListItem, ListItemText,ListSubheader, Stack, TextField, Typography} from \"@mui/material\"\nimport AddIcon from '@mui/icons-material/Add';\nimport RemoveIcon from '@mui/icons-material/Remove';\nimport { getToken, getUser, refresh } from '../utilities/LoginService';\nimport MyAppBar from './MyAppBar';\nimport SideMenu from './SideMenu';\n\nconst SetTitle = ({setProjectTitle, nextStage}) => {\n\n  const [title, setTitle] = useState(\"\")\n  const [errorMessage, setErrorMessage] = useState(\"\")\n\n  return (\n    <Card sx={{width:500}}>\n      <CardContent>\n        <Typography component=\"h1\" variant=\"h5\">\n          Create a new Project\n        </Typography>\n        <TextField\n          margin=\"normal\"\n          fullWidth\n          id=\"Project Title\"\n          label=\"Project Title\"\n          name=\"title\"\n          autoComplete=\"Title 1\"\n          value = {title}\n          onChange={(e)=>{setTitle(e.target.value)}}\n          autoFocus\n        />\n        {\n          (errorMessage)?\n          <Typography variant='subtitle2' color=\"red\">{errorMessage}</Typography>:\n          <></>\n        }\n      </CardContent>\n      <CardActions>\n        <Button\n          fullWidth\n          variant=\"contained\"\n          sx={{ mb: 2 }}\n          onClick={()=>{\n            fetch(\"http://localhost:8000/projectExists\",{\n              mode: \"cors\",\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n                \"x-access-token\": getToken(), \n                \"Access-Control-Allow-Origin\": \"*\"\n              },\n              body: JSON.stringify({title})\n            })\n            .then((res)=>{\n              if(res.ok)\n              {\n                return res.text()\n              }\n            })\n            .then((data)=>{\n              if(data == \"no\")\n              {\n                setProjectTitle(title)\n                nextStage()\n              }\n              else\n              {\n                setErrorMessage(\"Project name already exists\")\n              }\n            })\n          }}\n        >\n          Next\n        </Button>\n      </CardActions>\n      \n    </Card>\n  )\n}\n\nconst SetAdmins = ({setProjectAdmins, nextStage, previousStage, creator}) => {\n\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [admins, setAdmins] = useState([creator,])\n  const [suggestions, setSuggestions] = useState([])\n\n  useEffect(()=>{\n    fetch(\"http://localhost:8000/users\",\n    {\n      mode: \"cors\",\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-access-token\": getToken(), \n        \"Access-Control-Allow-Origin\": \"*\"\n      },\n    })\n    .then((res)=>res.json())\n    .then((data)=>{\n      console.log(\"Users\")\n      console.log(data)\n      data = data.filter(s=>s._id!==creator._id)\n      setSuggestions(data)\n    })\n  }, [creator,])\n\n  return (\n    <Card sx={{width:500}}>\n      <CardContent>\n        <Typography component=\"h1\" variant=\"h5\">\n          Select project administrators\n        </Typography>\n        <TextField\n          margin=\"normal\"\n          fullWidth\n          id=\"Search Bar\"\n          label=\"Search\"\n          name=\"search-bar\"\n          value = {searchTerm}\n          onChange={(e)=>{setSearchTerm(e.target.value)}}\n          autoFocus\n        />\n        <List>\n          {suggestions.filter((val)=>(val.username.includes(searchTerm))).map((val=>(\n            <ListItem key={val._id} secondaryAction={\n              <IconButton onClick={()=>{\n                setAdmins([...admins, val])\n                setSuggestions(suggestions.filter((suggestion)=>(suggestion._id !== val._id)))\n              }}>\n                <AddIcon color='success'></AddIcon>\n              </IconButton>\n            }>\n              <ListItemText primary={val.username} secondary={\"#\"+val._id}></ListItemText>\n            </ListItem>\n          )))}\n        </List>\n        <Divider></Divider>\n        <List>\n          {admins.map((val=>(\n            <ListItem key={val._id} secondaryAction={\n              <IconButton onClick={()=>{\n                setSuggestions([...suggestions, val])\n                setAdmins(admins.filter((admin)=>(admin._id !== val._id)))\n              }}>\n                <RemoveIcon sx={{color:\"red\"}}></RemoveIcon>\n              </IconButton>\n            }>\n              <ListItemText primary={val.username} secondary={\"#\"+val._id}></ListItemText>\n            </ListItem>\n          )))}\n        </List>\n      </CardContent>\n      <CardActions>\n        <Button\n          fullWidth\n          variant=\"contained\"\n          sx={{ mb: 2 }}\n          onClick={()=>{\n            previousStage()\n          }}\n        >\n          Back\n        </Button>\n        <Button\n          fullWidth\n          variant=\"contained\"\n          sx={{ mb: 2 }}\n          onClick={()=>{\n            setProjectAdmins(admins)\n            nextStage()\n          }}\n        >\n          Next\n        </Button>\n      </CardActions>\n      \n    </Card>\n  )\n}\n\n\nconst MilestoneForm = ({otherMilestones, setToggle, setMilestones, otherRequiredMilestones, setRequiredMilestones}) => {\n\n  const [milestoneName, setMilestoneName] = useState(\"\")\n  const [milestoneRequired, setMilestoneRequired] = useState(false)\n  const [milestonePrerequisites, setMilestonePrerequisites] = useState([])\n\n  const saveMilestone = ()=>{\n    const tempMilestone = {\n      name: milestoneName,\n      prerequisites: milestonePrerequisites\n    }\n    fetch(\"http://localhost:8000/milestones/\",{\n      mode: \"cors\",\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"x-access-token\": getToken(),\n      },\n      body: JSON.stringify(tempMilestone)\n    })\n    .then((res)=>{\n      if(res.ok)\n        return res.json()\n      else\n        throw Error(\"Refresh Error\")\n    })\n    .then((data)=>{\n      console.log(\"Milestone\")\n      console.log(data)\n      setMilestones([...otherMilestones, data])\n      if(milestoneRequired)\n      {\n        setRequiredMilestones([...otherRequiredMilestones, data])\n      }\n    })\n    .catch((err)=>{\n      console.log(err.message)\n    })\n    return true\n  }\n\n  return (\n    <Card sx={{width:500}}>\n      <CardContent>\n        <Typography component=\"h1\" variant=\"h5\">\n          New Milestone\n        </Typography>\n        <TextField\n          margin=\"normal\"\n          required\n          fullWidth\n          id=\"name\"\n          label=\"Milestone Name\"\n          name=\"name\"\n          autoFocus\n          value={milestoneName}\n          onChange={(e)=>{setMilestoneName(e.target.value)}}\n        />\n        <Button\n          fullWidth\n          variant={(milestoneRequired)?\"contained\":\"outlined\"}\n          onClick={()=>{\n            setMilestoneRequired(!milestoneRequired)\n          }}\n        >\n          Required\n        </Button>\n        <List subheader={\n          <ListSubheader component=\"div\">\n            Prerequisites\n          </ListSubheader>\n        }>\n          {otherMilestones.map((val=>(\n            <ListItem key={val._id} secondaryAction={\n              <Checkbox value={milestonePrerequisites.includes(val._id)} onChange={()=>{\n                  if(milestonePrerequisites.includes(val._id))\n                  {\n                    setMilestonePrerequisites(milestonePrerequisites.filter((prerequisite)=>(prerequisite !== val._id)))\n                  }\n                  else\n                  {\n                    setMilestonePrerequisites([...milestonePrerequisites, val._id])\n                  }\n                }\n              }></Checkbox>\n            }>\n              <ListItemText primary={val.name} secondary={(otherRequiredMilestones.includes(val))?\"Required\":\"Optional\"} ></ListItemText>\n            </ListItem>\n          )))}\n        </List>\n      </CardContent>\n      <CardActions>\n        <Button\n          fullWidth\n          variant=\"contained\"\n          sx={{ mb: 2 }}\n          onClick={()=>{\n            setToggle(false)\n          }}\n        >\n          Cancel\n        </Button>\n        <Button\n          disabled = {otherMilestones.map(m=>m.name).includes(milestoneName)}\n          fullWidth\n          variant=\"contained\"\n          sx={{ mb: 2 }}\n          onClick={()=>{\n            if(saveMilestone())\n              setToggle(false)\n          }}\n        >\n          Save\n        </Button>\n      </CardActions>\n      \n    </Card>\n  )\n}\n\n\n\nconst SetMilestones = ({setProjectMilestones, setProjectRequiredMilestones, nextStage, previousStage}) => {\n  const [milestones, setMilestones] = useState([])\n  const [requiredMilestones, setRequiredMilestone] = useState([])\n  const [toggle, setToggle] = useState(false)\n  return (\n    (!toggle)?\n    <Card sx={{width:500}}>\n      <CardContent>\n        <Typography component=\"h1\" variant=\"h5\">\n          Create Milestones for the Project\n        </Typography>\n        <Button fullWidth variant='outlined' sx={{mt:2}} onClick={()=>setToggle(true)}> Add Milestone</Button>\n        <List>\n          {milestones.map((val=>(\n            <ListItem key={val.name} secondaryAction={\n              <IconButton onClick={()=>{\n                setMilestones(milestones.filter((milestone)=>(milestone.name !== val.name)))\n              }}>\n                <RemoveIcon sx={{color:\"red\"}}></RemoveIcon>\n              </IconButton>\n            }>\n              <ListItemText primary={val.name + \" #\" + val._id} secondary={(requiredMilestones.includes(val))?\"Required\":\"Optional\"}></ListItemText>\n            </ListItem>\n          )))}\n        </List>\n      </CardContent>\n      <CardActions>\n        <Button\n          fullWidth\n          variant=\"contained\"\n          sx={{ mb: 2 }}\n          onClick={()=>{\n            previousStage()\n          }}\n        >\n          Previous\n        </Button>\n        <Button\n          fullWidth\n          variant=\"contained\"\n          sx={{ mb: 2 }}\n          onClick={()=>{\n            setProjectMilestones(milestones)\n            setProjectRequiredMilestones(requiredMilestones)\n            nextStage()\n          }}\n        >\n          Next\n        </Button>\n      </CardActions>\n      \n    </Card>:\n    <MilestoneForm otherMilestones={milestones} setToggle={setToggle} setMilestones={setMilestones} otherRequiredMilestones={requiredMilestones} setRequiredMilestones={setRequiredMilestone}></MilestoneForm>\n  )\n}\n\nconst Preview = ({title, admins, milestones, requiredMilestones, previousStage, creator}) => {\n\n  const navigate = useNavigate();\n  const [errorMessage, setErrorMessage] = useState(\"\")\n\n  return (\n    <Card sx={{width:500}}>\n      <CardContent>\n        <Typography component=\"h1\" variant=\"h5\">\n          {title}\n        </Typography>\n        <Stack direction=\"row\" justifyContent=\"space-evenly\">\n          <List subheader={\n            <ListSubheader component=\"div\">\n              Admins\n            </ListSubheader>\n          }>\n            {admins.map((val=>(\n              <ListItem key={val._id} divider={true}>\n                <ListItemText primary={val.username} secondary={\"#\"+val._id}></ListItemText>\n              </ListItem>\n            )))}\n          </List>\n          <List subheader={\n            <ListSubheader component=\"div\">\n              Milestones\n            </ListSubheader>\n          }>\n            {milestones.map((val=>(\n              <ListItem key={val._id} divider={true}>\n                <ListItemText primary={val.name} secondary={(requiredMilestones.includes(val))?\"Required\":\"Optional\"}></ListItemText>\n              </ListItem>\n            )))}\n          </List>\n        </Stack>\n        {\n          (errorMessage)?\n          <Typography variant='subtitle2'>{errorMessage}</Typography>:\n          <></>\n        }\n      </CardContent>\n      <CardActions>\n        <Button\n          fullWidth\n          variant=\"contained\"\n          sx={{ mb: 2 }}\n          onClick={()=>{\n            previousStage()\n          }}\n        >\n          Previous\n        </Button>\n        <Button\n          fullWidth\n          variant=\"contained\"\n          sx={{ mb: 2 }}\n          onClick={()=>{\n            const project = {\n              title, \n              admins: admins.map((a)=>(a._id)), \n              milestones : milestones.map((m)=>(m._id)),\n              requiredMilestones: requiredMilestones.map((m)=>(m._id))\n            }\n            console.log(project)\n            fetch(\"http://localhost:8000/projects\",\n            {\n              mode: \"cors\",\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n                \"x-access-token\": getToken(), \n                \"Access-Control-Allow-Origin\": \"*\"\n              },\n              body: JSON.stringify(project)\n            })\n            .then((res)=>{\n              if(res.ok)\n                return res.json()\n              else\n                throw Error(res.statusText)\n            })\n            .then((data)=>{\n              console.log(\"Created Project\")\n              console.log(data)\n              navigate(\"/\")\n            })\n            .catch((err)=>{\n              console.log(err.message)\n              setErrorMessage(err.message)\n            })\n\n          }}\n        >\n          Next\n        </Button>\n      </CardActions>\n      \n    </Card>\n  )\n}\n\n\n\n\n\nconst NewProjectForm = () => {\n\n  const [isDrawerOpen, setDrawer] = useState(false);\n  const toggleDrawer = ()=>{\n    setDrawer(!isDrawerOpen)\n  }\n\n  const [user, setLocalUser] = useState(getUser())\n  const [stage, setStage] = useState(0);\n  const nextStage = ()=>{\n    setStage(stage+1);\n  }\n  const previousStage = ()=>{\n    setStage(stage-1);\n  }\n\n  useEffect(()=>{\n    refresh(setLocalUser)\n  },[])\n\n  const showForm = (s)=>{\n    if(s === 0)\n      return (<SetTitle setProjectTitle = {setProjectTitle} nextStage = {nextStage}></SetTitle>)\n    else if (s === 1)\n      return (<SetAdmins setProjectAdmins={setProjectAdmins} nextStage = {nextStage} previousStage = {previousStage} creator = {user}></SetAdmins>)\n    else if (s === 2)\n      return (<SetMilestones setProjectMilestones={setProjectMilestones} setProjectRequiredMilestones={setProjectRequiredMilestones} nextStage = {nextStage} previousStage = {previousStage}></SetMilestones>)\n    else if (s === 3)\n      return (<Preview title={projectTitle} admins = {projectAdmins} milestones = {projectMilestones} requiredMilestones = {projectRequiredMilestones} previousStage = {previousStage} creator={user}></Preview>)\n  }\n\n  const [projectTitle, setProjectTitle] = useState(\"\")\n  const [projectAdmins, setProjectAdmins] = useState([])\n  const [projectMilestones, setProjectMilestones] = useState([])\n  const [projectRequiredMilestones, setProjectRequiredMilestones] = useState([])\n\n  return (\n    <div>\n      <CssBaseline></CssBaseline>\n      <MyAppBar title=\"New Project\" logoutFun={()=>{}} toggleDrawer={toggleDrawer}></MyAppBar>\n      <Drawer\n          anchor={\"left\"}\n          open={isDrawerOpen}\n          onClose={toggleDrawer}\n        >\n          <SideMenu></SideMenu>\n      </Drawer>\n      <Box sx={{margin: 4,\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center', \n              }}>\n        {showForm(stage)}\n      </Box>\n    </div>\n  )\n}\n\nexport default NewProjectForm","C:\\Users\\Programming\\Documents\\GitHub\\progress-tracker\\src\\components\\Register.js",[],[],"C:\\Users\\Programming\\Documents\\GitHub\\progress-tracker\\src\\components\\ProjectScreen.js",[],[],"C:\\Users\\Programming\\Documents\\GitHub\\progress-tracker\\src\\components\\MyAchievements.js",["91","92"],[],"import {React, useState, useEffect} from 'react'\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport {Avatar, Box, Button, Card, CardContent, CssBaseline, Drawer, List, ListItem, ListItemText, ListSubheader, Stack, Typography } from '@mui/material';\r\nimport ErrorIcon from '@mui/icons-material/Error';\r\nimport MyAppBar from './MyAppBar'\r\nimport SideMenu from './SideMenu';\r\nimport { getToken, getUser, refresh } from '../utilities/LoginService';\r\n\r\nconst MyAchievements = () => {\r\n\r\n  const [isDrawerOpen, setDrawer] = useState(false);\r\n  const toggleDrawer = ()=>{\r\n    setDrawer(!isDrawerOpen)\r\n  }\r\n  const navigate = useNavigate()\r\n\r\n  const [user, setLocalUser] = useState(getUser())\r\n  const [achievements, setAchievements] = useState([]);\r\n  const [errorMessage, setErrorMessage] = useState(\"\")\r\n\r\n  useEffect(()=>{\r\n    refresh(setLocalUser)\r\n    fetch(\"http://localhost:8000/achievements\",\r\n    {\r\n      mode: \"cors\",\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"x-access-token\": getToken(), \r\n        \"Access-Control-Allow-Origin\": \"*\"\r\n      },\r\n    })\r\n    .then((res)=>{\r\n      if(res.ok)\r\n      {\r\n        return res.json()\r\n      }\r\n      else\r\n      {\r\n        throw Error(res.statusText)\r\n      }\r\n      \r\n    })\r\n    .then((data)=>{\r\n      console.log(\"Achievements\")\r\n      console.log(data)\r\n      setAchievements(data)\r\n    })\r\n    .catch((err)=>{\r\n      console.log(err.message)\r\n      setErrorMessage(err.message)\r\n    })\r\n  },[])\r\n\r\n  return (\r\n    <div>\r\n      <CssBaseline></CssBaseline>\r\n      <MyAppBar title=\"My Achievements\" toggleDrawer={toggleDrawer}></MyAppBar>\r\n      <Drawer\r\n        anchor={\"left\"}\r\n        open={isDrawerOpen}\r\n        onClose={toggleDrawer}\r\n      >\r\n        <SideMenu></SideMenu>\r\n      </Drawer>\r\n      <Box sx={{margin: 4,\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                alignItems: 'center', \r\n      }}>\r\n        <Card sx={{width:500}}>\r\n          {\r\n            (errorMessage)?\r\n            <CardContent sx={{display: 'flex', flexDirection: 'column',alignItems: 'center'}}>\r\n              <Avatar sx={{ m: 1, bgcolor: 'red' }}>\r\n                <ErrorIcon></ErrorIcon>   \r\n              </Avatar>\r\n              <Typography variant=\"subtitle1\">{errorMessage}</Typography>\r\n            </CardContent>:\r\n            <CardContent>\r\n              <List subheader={\r\n                <ListSubheader>My Achievements</ListSubheader>\r\n              }>\r\n                {\r\n                  achievements.map((achievement)=>(\r\n                    <ListItem key={achievement._id} secondaryAction={(\r\n                      <Stack direction=\"row\">\r\n                        <Button onClick={()=>{\r\n                          if(achievement.cardanoTx)\r\n                          {\r\n                            window.open(\"https://preprod.cexplorer.io/tx/\"+achievement.cardanoTx+\"/metadata#data\", '_blank');\r\n                          }\r\n                        }}>Show In Explorer</Button>\r\n                      </Stack>\r\n                    )}>\r\n                      <ListItemText primary={achievement.milestoneName} secondary={achievement.data}></ListItemText>\r\n                    </ListItem>\r\n                  ))\r\n                }\r\n              </List>\r\n            </CardContent>\r\n          }\r\n          \r\n        </Card>\r\n      </Box>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MyAchievements","C:\\Users\\Programming\\Documents\\GitHub\\progress-tracker\\src\\utilities\\LoginService.js",[],[],"C:\\Users\\Programming\\Documents\\GitHub\\progress-tracker\\src\\components\\MyAppBar.js",[],[],"C:\\Users\\Programming\\Documents\\GitHub\\progress-tracker\\src\\components\\SideMenu.js",[],[],"C:\\Users\\Programming\\Documents\\GitHub\\progress-tracker\\src\\utilities\\ProjectService.js",[],[],{"ruleId":"93","severity":1,"message":"94","line":17,"column":10,"nodeType":"95","messageId":"96","endLine":17,"endColumn":14},{"ruleId":"97","severity":1,"message":"98","line":181,"column":40,"nodeType":"99","messageId":"100","endLine":181,"endColumn":42},{"ruleId":"93","severity":1,"message":"101","line":350,"column":7,"nodeType":"95","messageId":"96","endLine":350,"endColumn":20},{"ruleId":"93","severity":1,"message":"94","line":17,"column":10,"nodeType":"95","messageId":"96","endLine":17,"endColumn":14},{"ruleId":"97","severity":1,"message":"98","line":61,"column":23,"nodeType":"99","messageId":"100","endLine":61,"endColumn":25},{"ruleId":"93","severity":1,"message":"102","line":15,"column":9,"nodeType":"95","messageId":"96","endLine":15,"endColumn":17},{"ruleId":"93","severity":1,"message":"94","line":17,"column":10,"nodeType":"95","messageId":"96","endLine":17,"endColumn":14},"no-unused-vars","'user' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'SuccessScreen' is assigned a value but never used.","'navigate' is assigned a value but never used."]