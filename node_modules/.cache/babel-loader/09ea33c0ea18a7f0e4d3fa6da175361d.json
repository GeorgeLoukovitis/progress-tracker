{"ast":null,"code":"const login = (username, password, setUser) => {\n  fetch(\"http://localhost:8000/users\").then(res => res.json()).then(data => {\n    let userFilter = data.filter(usr => usr.username === username && usr.password === password);\n    console.log(userFilter);\n\n    if (userFilter.length !== 0) {\n      localStorage.setItem(\"user\", JSON.stringify(userFilter[0]));\n      setUser(userFilter[0]);\n    }\n  });\n};\n\nconst logout = () => {\n  setUser(null);\n};\n\nconst register = (username, password, setUser) => {\n  fetch(\"http://localhost:8000/users\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      username,\n      password,\n      projectsEnrolled: []\n    })\n  }).then(res => {\n    if (res.ok) {\n      login(username, password, setUser);\n    }\n  });\n};\n\nconst getUser = () => {\n  return JSON.parse(localStorage.getItem(\"user\"));\n};\n\nconst setUser = usr => {\n  localStorage.setItem(\"user\", JSON.stringify(usr));\n};\n\nconst refresh = updateState => {\n  if (JSON.parse(localStorage.getItem(\"user\"))) {}\n\n  const uid = JSON.parse(localStorage.getItem(\"user\")).id;\n  fetch(\"http://localhost:8000/users/\" + uid).then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n  }).then(data => {\n    setUser(data);\n    updateState(data);\n  });\n};\n\nexport { login, logout, register, getUser, setUser, refresh };","map":{"version":3,"sources":["C:/Users/Programming/Documents/GitHub/progress-tracker/src/utilities/LoginService.js"],"names":["login","username","password","setUser","fetch","then","res","json","data","userFilter","filter","usr","console","log","length","localStorage","setItem","JSON","stringify","logout","register","method","headers","body","projectsEnrolled","ok","getUser","parse","getItem","refresh","updateState","uid","id"],"mappings":"AACA,MAAMA,KAAK,GAAG,CAACC,QAAD,EAAWC,QAAX,EAAqBC,OAArB,KAAiC;AAC3CC,EAAAA,KAAK,CAAC,6BAAD,CAAL,CACGC,IADH,CACSC,GAAD,IAAOA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAESG,IAAD,IAAQ;AACZ,QAAIC,UAAU,GAAGD,IAAI,CAACE,MAAL,CAAaC,GAAD,IAAQA,GAAG,CAACV,QAAJ,KAAiBA,QAAjB,IAA6BU,GAAG,CAACT,QAAJ,KAAiBA,QAAlE,CAAjB;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYJ,UAAZ;;AACA,QAAGA,UAAU,CAACK,MAAX,KAAsB,CAAzB,EACA;AACEC,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeT,UAAU,CAAC,CAAD,CAAzB,CAA7B;AACAN,MAAAA,OAAO,CAACM,UAAU,CAAC,CAAD,CAAX,CAAP;AACD;AACF,GAVH;AAWH,CAZD;;AAcA,MAAMU,MAAM,GAAG,MAAM;AACnBhB,EAAAA,OAAO,CAAC,IAAD,CAAP;AACD,CAFD;;AAIA,MAAMiB,QAAQ,GAAG,CAACnB,QAAD,EAAWC,QAAX,EAAqBC,OAArB,KAAiC;AAChDC,EAAAA,KAAK,CAAC,6BAAD,EACH;AACEiB,IAAAA,MAAM,EAAE,MADV;AAEEC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAFX;AAKEC,IAAAA,IAAI,EAAEN,IAAI,CAACC,SAAL,CAAe;AAACjB,MAAAA,QAAD;AAAWC,MAAAA,QAAX;AAAqBsB,MAAAA,gBAAgB,EAAC;AAAtC,KAAf;AALR,GADG,CAAL,CAQGnB,IARH,CAQSC,GAAD,IAAO;AACX,QAAGA,GAAG,CAACmB,EAAP,EACA;AACEzB,MAAAA,KAAK,CAACC,QAAD,EAAWC,QAAX,EAAoBC,OAApB,CAAL;AACD;AACF,GAbH;AAcD,CAfD;;AAiBA,MAAMuB,OAAO,GAAG,MAAK;AACnB,SAAOT,IAAI,CAACU,KAAL,CAAWZ,YAAY,CAACa,OAAb,CAAqB,MAArB,CAAX,CAAP;AACD,CAFD;;AAIA,MAAMzB,OAAO,GAAIQ,GAAD,IAAS;AACvBI,EAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeP,GAAf,CAA7B;AACD,CAFD;;AAIA,MAAMkB,OAAO,GAAIC,WAAD,IAAiB;AAC/B,MAAGb,IAAI,CAACU,KAAL,CAAWZ,YAAY,CAACa,OAAb,CAAqB,MAArB,CAAX,CAAH,EACA,CAEC;;AACD,QAAMG,GAAG,GAAGd,IAAI,CAACU,KAAL,CAAWZ,YAAY,CAACa,OAAb,CAAqB,MAArB,CAAX,EAAyCI,EAArD;AACA5B,EAAAA,KAAK,CAAC,iCAA+B2B,GAAhC,CAAL,CACG1B,IADH,CACSC,GAAD,IAAO;AACX,QAAGA,GAAG,CAACmB,EAAP,EACA;AACE,aAAOnB,GAAG,CAACC,IAAJ,EAAP;AACD;AACF,GANH,EAOGF,IAPH,CAOSG,IAAD,IAAQ;AACZL,IAAAA,OAAO,CAACK,IAAD,CAAP;AACAsB,IAAAA,WAAW,CAACtB,IAAD,CAAX;AACD,GAVH;AAYD,CAlBD;;AAsBA,SAAQR,KAAR,EAAemB,MAAf,EAAuBC,QAAvB,EAAiCM,OAAjC,EAA0CvB,OAA1C,EAAmD0B,OAAnD","sourcesContent":["\nconst login = (username, password, setUser) => {\n    fetch(\"http://localhost:8000/users\")\n      .then((res)=>res.json())\n      .then((data)=>{\n        let userFilter = data.filter((usr)=>(usr.username === username && usr.password === password))\n        console.log(userFilter)\n        if(userFilter.length !== 0)\n        {\n          localStorage.setItem(\"user\", JSON.stringify(userFilter[0]))\n          setUser(userFilter[0])\n        }\n      })\n}\n\nconst logout = () => {\n  setUser(null)\n}\n\nconst register = (username, password, setUser) => {\n  fetch(\"http://localhost:8000/users\",\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({username, password, projectsEnrolled:[]})\n    })\n    .then((res)=>{\n      if(res.ok)\n      {\n        login(username, password,setUser)\n      }\n    })\n}\n\nconst getUser = () =>{\n  return JSON.parse(localStorage.getItem(\"user\"))\n}\n\nconst setUser = (usr) => {\n  localStorage.setItem(\"user\", JSON.stringify(usr))\n}\n\nconst refresh = (updateState) => {\n  if(JSON.parse(localStorage.getItem(\"user\")))\n  {\n    \n  }\n  const uid = JSON.parse(localStorage.getItem(\"user\")).id\n  fetch(\"http://localhost:8000/users/\"+uid)\n    .then((res)=>{\n      if(res.ok)\n      {\n        return res.json()\n      }\n    })\n    .then((data)=>{\n      setUser(data)\n      updateState(data)\n    })\n\n}\n\n\n\nexport {login, logout, register, getUser, setUser, refresh}"]},"metadata":{},"sourceType":"module"}