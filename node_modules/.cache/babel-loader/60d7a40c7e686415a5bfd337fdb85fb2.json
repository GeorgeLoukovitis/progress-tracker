{"ast":null,"code":"import{getToken,setUser}from\"./LoginService\";var isMilestoneAchieved=function isMilestoneAchieved(usr,milestone){return usr.achievements.map(function(a){return a.milestone;}).includes(milestone._id);};var isEnrolled=function isEnrolled(usr,pid){var projectIds=usr.projectsJoined;return projectIds.includes(pid);};var enrollToProject=function enrollToProject(pid,updateState){var token=getToken();fetch(\"http://localhost:8000/enrollToProject/\",{mode:\"cors\",method:\"POST\",headers:{\"Content-Type\":\"application/json\",\"x-access-token\":token,\"Access-Control-Allow-Origin\":\"*\"},body:JSON.stringify({projectId:pid})}).then(function(res){if(res.ok){return res.json();}else{throw Error(\"Enrollment error\");}}).then(function(data){setUser(data.user);updateState(data.user);console.log(data);}).catch(function(err){console.log(err.message);});};export{isMilestoneAchieved,isEnrolled,enrollToProject};","map":{"version":3,"sources":["C:/Users/Programming/Documents/GitHub/progress-tracker/Frontend/src/utilities/ProjectService.js"],"names":["getToken","setUser","isMilestoneAchieved","usr","milestone","achievements","map","a","includes","_id","isEnrolled","pid","projectIds","projectsJoined","enrollToProject","updateState","token","fetch","mode","method","headers","body","JSON","stringify","projectId","then","res","ok","json","Error","data","user","console","log","catch","err","message"],"mappings":"AAAA,OAASA,QAAT,CAAmBC,OAAnB,KAAkC,gBAAlC,CAEA,GAAMC,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAACC,GAAD,CAAKC,SAAL,CAAiB,CAC3C,MAAOD,CAAAA,GAAG,CAACE,YAAJ,CAAiBC,GAAjB,CAAqB,SAACC,CAAD,QAAMA,CAAAA,CAAC,CAACH,SAAR,EAArB,EAAyCI,QAAzC,CAAkDJ,SAAS,CAACK,GAA5D,CAAP,CAED,CAHD,CAKA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACP,GAAD,CAAKQ,GAAL,CAAa,CAC9B,GAAMC,CAAAA,UAAU,CAAGT,GAAG,CAACU,cAAvB,CACA,MAAOD,CAAAA,UAAU,CAACJ,QAAX,CAAoBG,GAApB,CAAP,CACD,CAHD,CAKA,GAAMG,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACH,GAAD,CAAMI,WAAN,CAAoB,CAC1C,GAAMC,CAAAA,KAAK,CAAGhB,QAAQ,EAAtB,CACAiB,KAAK,CAAC,wCAAD,CACL,CACEC,IAAI,CAAE,MADR,CAEEC,MAAM,CAAE,MAFV,CAGEC,OAAO,CAAE,CACP,eAAgB,kBADT,CAEP,iBAAkBJ,KAFX,CAGP,8BAA+B,GAHxB,CAHX,CAQEK,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CAACC,SAAS,CAACb,GAAX,CAAf,CARR,CADK,CAAL,CAWCc,IAXD,CAWM,SAACC,GAAD,CAAO,CACX,GAAGA,GAAG,CAACC,EAAP,CACA,CACE,MAAOD,CAAAA,GAAG,CAACE,IAAJ,EAAP,CACD,CAHD,IAKA,CACE,KAAMC,CAAAA,KAAK,CAAC,kBAAD,CAAX,CACD,CACF,CApBD,EAqBCJ,IArBD,CAqBM,SAACK,IAAD,CAAQ,CACZ7B,OAAO,CAAC6B,IAAI,CAACC,IAAN,CAAP,CACAhB,WAAW,CAACe,IAAI,CAACC,IAAN,CAAX,CACAC,OAAO,CAACC,GAAR,CAAYH,IAAZ,EACD,CAzBD,EA0BCI,KA1BD,CA0BO,SAACC,GAAD,CAAO,CACZH,OAAO,CAACC,GAAR,CAAYE,GAAG,CAACC,OAAhB,EACD,CA5BD,EA6BD,CA/BD,CAiCA,OAAQlC,mBAAR,CAA6BQ,UAA7B,CAAyCI,eAAzC","sourcesContent":["import { getToken, setUser } from \"./LoginService\";\n\nconst isMilestoneAchieved = (usr,milestone)=>{\n  return usr.achievements.map((a)=>(a.milestone)).includes(milestone._id)\n\n}\n\nconst isEnrolled = (usr,pid) => {\n  const projectIds = usr.projectsJoined\n  return projectIds.includes(pid)\n}\n\nconst enrollToProject = (pid, updateState)=>{\n  const token = getToken()\n  fetch(\"http://localhost:8000/enrollToProject/\",\n  {\n    mode: \"cors\",\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-access-token\": token, \n      \"Access-Control-Allow-Origin\": \"*\"\n    },\n    body: JSON.stringify({projectId:pid})\n  })\n  .then((res)=>{\n    if(res.ok)\n    {\n      return res.json()\n    }\n    else\n    {\n      throw Error(\"Enrollment error\")\n    }\n  })\n  .then((data)=>{\n    setUser(data.user)\n    updateState(data.user)\n    console.log(data)\n  })\n  .catch((err)=>{\n    console.log(err.message)\n  })\n}\n\nexport {isMilestoneAchieved, isEnrolled, enrollToProject}"]},"metadata":{},"sourceType":"module"}