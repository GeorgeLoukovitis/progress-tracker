{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Programming\\\\Documents\\\\GitHub\\\\progress-tracker\\\\src\\\\components\\\\ProjectScreen.js\",\n    _s = $RefreshSig$();\n\nimport { Box, Button, Card, CardContent, Checkbox, Container, CssBaseline, Divider, Drawer, List, ListItem, ListItemButton, ListItemIcon, ListItemText, Paper, Stack, Typography } from '@mui/material';\nimport AssignmentLateIcon from '@mui/icons-material/AssignmentLate';\nimport { React, useState } from 'react';\nimport { useParams } from \"react-router-dom\";\nimport MyAppBar from './MyAppBar';\nimport SideMenu from './SideMenu';\nimport { useEffect } from 'react';\nimport { getUser, setUser, refresh } from '../utilities/LoginService';\nimport { isEnrolled, has } from '../utilities/ProjectService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProjectScreen = _ref => {\n  _s();\n\n  let {\n    logoutFun\n  } = _ref;\n  refresh();\n  const {\n    projectId\n  } = useParams();\n  const [user, setLocalUser] = useState(getUser());\n  const [project, setProject] = useState(null);\n  useEffect(() => {\n    fetch(\"http://localhost:8000/projects/\").then(res => {\n      if (res.ok) {\n        return res.json();\n      } else {\n        throw Error();\n      }\n    }).then(data => {\n      setProject(data.filter(p => p.id == projectId)[0]);\n    });\n  }, []);\n  const [isDrawerOpen, setDrawer] = useState(false);\n\n  const toggleDrawer = () => {\n    setDrawer(!isDrawerOpen);\n  }; // const isMilestoneAchieved = (usr,projectId,milestone)=>{\n  //   const userProjectIds = usr.projectsEnrolled.map((p)=>(p.projectId))\n  //   if(!userProjectIds.includes(projectId))\n  //     return false;\n  //   const currentProject = usr.projectsEnrolled.filter((p)=>(p.projectId==projectId))[0]\n  //   return currentProject.milestonesAchieved.includes(milestone.name)\n  // }\n  // const isEnrolled = (usr,id) => {\n  //   const projectIds = usr.projectsEnrolled.map((p)=>p.projectId)\n  //   return projectIds.includes(id)\n  // }\n  // const enrollToProject = (id, updateState)=>{\n  //   const user = getUser()\n  //   user.projectsEnrolled.push({\n  //     projectId: id,\n  //     milestonesAchieved: []\n  //   })\n  //   fetch(\"http://localhost:8000/users/\"+user.id,\n  //   {\n  //     method: \"PUT\",\n  //     headers: {\n  //       \"Content-Type\": \"application/json\"\n  //     },\n  //     body: JSON.stringify(user)\n  //   })\n  //   .then((res)=>{\n  //     if(res.ok)\n  //     {\n  //       return res.json()\n  //     }\n  //   })\n  //   .then((data)=>{\n  //     setUser(data)\n  //     updateState(data)\n  //     console.log(data)\n  //   })\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MyAppBar, {\n      logoutFun: logoutFun,\n      toggleDrawer: toggleDrawer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Drawer, {\n      anchor: \"left\",\n      open: isDrawerOpen,\n      onClose: toggleDrawer,\n      children: /*#__PURE__*/_jsxDEV(SideMenu, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        margin: 4\n      },\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: project ? /*#__PURE__*/_jsxDEV(Stack, {\n          padding: 4,\n          children: [/*#__PURE__*/_jsxDEV(Stack, {\n            direction: \"row\",\n            justifyContent: \"space-between\",\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h3\",\n              children: project.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Card, {\n              children: /*#__PURE__*/_jsxDEV(CardContent, {\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"h5\",\n                  children: \"Details:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 100,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 101,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Stack, {\n                  direction: \"row\",\n                  spacing: 1,\n                  children: [/*#__PURE__*/_jsxDEV(Typography, {\n                    children: \"creator:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 103,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                    children: project.creator.username\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 104,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 102,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Stack, {\n                  direction: \"row\",\n                  spacing: 1,\n                  children: [/*#__PURE__*/_jsxDEV(Typography, {\n                    children: \"date:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 107,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                    children: Date(project.date)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 108,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 106,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(List, {\n            children: project.milestones.map(milestone => /*#__PURE__*/_jsxDEV(ListItem, {\n              divider: true,\n              secondaryAction: /*#__PURE__*/_jsxDEV(Checkbox, {\n                edge: \"end\",\n                checked: isMilestoneAchieved(user, projectId, milestone)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 21\n              }, this),\n              children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n                children: /*#__PURE__*/_jsxDEV(AssignmentLateIcon, {\n                  color: \"yellow\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 122,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                primary: milestone.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 21\n              }, this)]\n            }, milestone.name, true, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Stack, {\n            direction: \"row\",\n            justifyContent: \"end\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: isEnrolled(user, projectId) ? \"contained\" : \"outlined\",\n              disabled: isEnrolled(user, projectId),\n              color: \"success\",\n              onClick: () => {\n                enrollToProject(projectId, setLocalUser);\n              },\n              children: isEnrolled(user, projectId) ? \"Enrolled\" : \"Enroll\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ProjectScreen, \"bqRulDLxkR3sndbIglkCah7Rcag=\", false, function () {\n  return [useParams];\n});\n\n_c = ProjectScreen;\nexport default ProjectScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProjectScreen\");","map":{"version":3,"sources":["C:/Users/Programming/Documents/GitHub/progress-tracker/src/components/ProjectScreen.js"],"names":["Box","Button","Card","CardContent","Checkbox","Container","CssBaseline","Divider","Drawer","List","ListItem","ListItemButton","ListItemIcon","ListItemText","Paper","Stack","Typography","AssignmentLateIcon","React","useState","useParams","MyAppBar","SideMenu","useEffect","getUser","setUser","refresh","isEnrolled","has","ProjectScreen","logoutFun","projectId","user","setLocalUser","project","setProject","fetch","then","res","ok","json","Error","data","filter","p","id","isDrawerOpen","setDrawer","toggleDrawer","margin","title","creator","username","Date","date","milestones","map","milestone","isMilestoneAchieved","name","enrollToProject"],"mappings":"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","sourcesContent":["import {Box, Button, Card, CardContent, Checkbox, Container, CssBaseline, Divider, Drawer, List, ListItem, ListItemButton, ListItemIcon, ListItemText, Paper, Stack, Typography } from '@mui/material'\nimport AssignmentLateIcon from '@mui/icons-material/AssignmentLate';\nimport {React, useState} from 'react'\nimport {useParams} from \"react-router-dom\"\nimport MyAppBar from './MyAppBar';\nimport SideMenu from './SideMenu';\nimport { useEffect } from 'react';\nimport { getUser, setUser, refresh } from '../utilities/LoginService';\nimport { isEnrolled, has } from '../utilities/ProjectService';\n\nconst ProjectScreen = ({logoutFun}) => {\n\n  refresh()\n  const {projectId} = useParams()\n  const [user, setLocalUser] = useState(getUser())\n  const [project, setProject] = useState(null)\n\n  useEffect(()=>{\n    fetch(\"http://localhost:8000/projects/\")\n      .then((res)=>{\n        if(res.ok)\n        {\n          return res.json()\n        }\n        else{\n          throw Error()\n        }\n      })\n      .then((data)=>{\n        setProject(data.filter((p)=>(p.id == projectId))[0])\n      })\n  }, [])\n\n  const [isDrawerOpen, setDrawer] = useState(false);\n  const toggleDrawer = ()=>{\n    setDrawer(!isDrawerOpen)\n  }\n\n  // const isMilestoneAchieved = (usr,projectId,milestone)=>{\n  //   const userProjectIds = usr.projectsEnrolled.map((p)=>(p.projectId))\n  //   if(!userProjectIds.includes(projectId))\n  //     return false;\n  //   const currentProject = usr.projectsEnrolled.filter((p)=>(p.projectId==projectId))[0]\n  //   return currentProject.milestonesAchieved.includes(milestone.name)\n\n  // }\n\n  // const isEnrolled = (usr,id) => {\n  //   const projectIds = usr.projectsEnrolled.map((p)=>p.projectId)\n  //   return projectIds.includes(id)\n  // }\n\n  // const enrollToProject = (id, updateState)=>{\n  //   const user = getUser()\n  //   user.projectsEnrolled.push({\n  //     projectId: id,\n  //     milestonesAchieved: []\n  //   })\n  //   fetch(\"http://localhost:8000/users/\"+user.id,\n  //   {\n  //     method: \"PUT\",\n  //     headers: {\n  //       \"Content-Type\": \"application/json\"\n  //     },\n  //     body: JSON.stringify(user)\n  //   })\n  //   .then((res)=>{\n  //     if(res.ok)\n  //     {\n  //       return res.json()\n  //     }\n  //   })\n  //   .then((data)=>{\n  //     setUser(data)\n  //     updateState(data)\n  //     console.log(data)\n  //   })\n  // }\n\n  return (\n    <div>\n      <CssBaseline></CssBaseline>\n      <MyAppBar logoutFun={logoutFun} toggleDrawer={toggleDrawer}></MyAppBar>\n      <Drawer\n        anchor={\"left\"}\n        open={isDrawerOpen}\n        onClose={toggleDrawer}\n      >\n        <SideMenu></SideMenu>\n      </Drawer>\n      <Box sx={{margin: 4}}>\n        <Card>\n          {\n            (project)?\n            <Stack padding={4}>\n              <Stack direction=\"row\" justifyContent=\"space-between\">\n                <Typography variant='h3'>{project.title}</Typography>\n                <Card>\n                  <CardContent>\n                    <Typography variant='h5'>Details:</Typography>\n                    <Divider></Divider>\n                    <Stack direction=\"row\" spacing={1}>\n                      <Typography>creator:</Typography>\n                      <Typography>{project.creator.username}</Typography>\n                    </Stack>\n                    <Stack direction=\"row\" spacing={1}>\n                      <Typography>date:</Typography>\n                      <Typography>{Date(project.date)}</Typography>\n                    </Stack>\n                  </CardContent>\n                </Card>\n              </Stack>\n              <List>\n                {project.milestones.map((milestone)=>(\n                  <ListItem divider={true} key={milestone.name} secondaryAction={\n                    <Checkbox\n                      edge=\"end\"\n                      checked={isMilestoneAchieved(user,projectId,milestone)}\n                    />\n                  }>\n                    <ListItemIcon>\n                      <AssignmentLateIcon color='yellow'></AssignmentLateIcon>\n                    </ListItemIcon>\n                    <ListItemText primary = {milestone.name}></ListItemText>\n                  </ListItem>\n                ))}\n              </List>\n              <Stack direction=\"row\" justifyContent=\"end\">\n              <Button variant={(isEnrolled(user,projectId))?\"contained\":\"outlined\"} disabled={isEnrolled(user,projectId)} color='success' onClick={()=>{enrollToProject(projectId,setLocalUser)}}>{(isEnrolled(user,projectId))?\"Enrolled\":\"Enroll\"}</Button>\n              </Stack>\n            </Stack>:\n            <div></div>\n          }\n        </Card>\n      </Box>\n    </div>\n  )\n}\n\nexport default ProjectScreen"]},"metadata":{},"sourceType":"module"}