{"ast":null,"code":"const login = (email, password, updateState, setError) => {\n  fetch(\"http://localhost:8000/login\", {\n    mode: \"cors\",\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\"\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(res => {\n    if (res.ok) {\n      return res.json();\n    } else {\n      throw Error(\"Login Error\");\n    }\n  }).then(data => {\n    if (data) {\n      console.log(data);\n      setUser(data);\n      updateState(data);\n      setToken(data.token);\n    }\n  }).catch(err => {\n    setError(e);\n  });\n};\n\nconst logout = () => {\n  localStorage.removeItem(\"user\");\n  localStorage.removeItem(\"token\");\n};\n\nconst register = (firstName, lastName, email, password, updateState) => {\n  fetch(\"http://localhost:8000/register\", {\n    mode: \"cors\",\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\"\n    },\n    body: JSON.stringify({\n      email,\n      password,\n      firstName,\n      lastName\n    })\n  }).then(res => {\n    if (res.ok) {\n      return res.json();\n    } else {\n      throw Error(\"Registration Error\");\n    }\n  }).then(data => {\n    console.log(data);\n    updateState(data);\n    setUser(data);\n    setToken(data.token);\n  }).catch(err => {\n    console.log(err.message);\n  });\n};\n\nconst getUser = () => {\n  return JSON.parse(localStorage.getItem(\"user\"));\n};\n\nconst setUser = usr => {\n  localStorage.setItem(\"user\", JSON.stringify(usr));\n};\n\nconst getToken = () => {\n  return localStorage.getItem(\"token\");\n};\n\nconst setToken = tkn => {\n  localStorage.setItem(\"token\", tkn);\n};\n\nconst refresh = updateState => {\n  if (localStorage.getItem(\"user\")) {\n    const uid = getUser()._id;\n\n    const token = getToken();\n    console.log(\"Refresh user \" + uid);\n    fetch(\"http://localhost:8000/users/\" + uid, {\n      mode: \"cors\",\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-access-token\": token,\n        \"Access-Control-Allow-Origin\": \"*\"\n      }\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      } else {\n        throw Error(\"Refresh Error\");\n      }\n    }).then(data => {\n      setUser(data);\n      updateState(data);\n    }).catch(err => {\n      console.log(err.message);\n    });\n  }\n};\n\nexport { login, logout, register, getUser, setUser, refresh, getToken };","map":{"version":3,"sources":["C:/Users/Programming/Documents/GitHub/progress-tracker/Frontend/src/utilities/LoginService.js"],"names":["login","email","password","updateState","setError","fetch","mode","method","headers","body","JSON","stringify","then","res","ok","json","Error","data","console","log","setUser","setToken","token","catch","err","e","logout","localStorage","removeItem","register","firstName","lastName","message","getUser","parse","getItem","usr","setItem","getToken","tkn","refresh","uid","_id"],"mappings":"AACA,MAAMA,KAAK,GAAG,CAACC,KAAD,EAAQC,QAAR,EAAkBC,WAAlB,EAA+BC,QAA/B,KAA4C;AACtDC,EAAAA,KAAK,CAAC,6BAAD,EACL;AACEC,IAAAA,IAAI,EAAE,MADR;AAEEC,IAAAA,MAAM,EAAE,MAFV;AAGEC,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEP,qCAA+B;AAFxB,KAHX;AAOEC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACV,MAAAA,KAAD;AAAQC,MAAAA;AAAR,KAAf;AAPR,GADK,CAAL,CAUGU,IAVH,CAUSC,GAAD,IAAO;AACX,QAAGA,GAAG,CAACC,EAAP,EACA;AACE,aAAOD,GAAG,CAACE,IAAJ,EAAP;AACD,KAHD,MAKA;AACE,YAAMC,KAAK,CAAC,aAAD,CAAX;AACD;AACF,GAnBH,EAoBGJ,IApBH,CAoBSK,IAAD,IAAQ;AACZ,QAAGA,IAAH,EACA;AACEC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAG,MAAAA,OAAO,CAACH,IAAD,CAAP;AACAd,MAAAA,WAAW,CAACc,IAAD,CAAX;AACAI,MAAAA,QAAQ,CAACJ,IAAI,CAACK,KAAN,CAAR;AACD;AACF,GA5BH,EA6BGC,KA7BH,CA6BUC,GAAD,IACP;AACEpB,IAAAA,QAAQ,CAACqB,CAAD,CAAR;AACD,GAhCH;AAiCH,CAlCD;;AAoCA,MAAMC,MAAM,GAAG,MAAM;AACnBC,EAAAA,YAAY,CAACC,UAAb,CAAwB,MAAxB;AACAD,EAAAA,YAAY,CAACC,UAAb,CAAwB,OAAxB;AACD,CAHD;;AAKA,MAAMC,QAAQ,GAAG,CAACC,SAAD,EAAYC,QAAZ,EAAsB9B,KAAtB,EAA6BC,QAA7B,EAAuCC,WAAvC,KAAuD;AACtEE,EAAAA,KAAK,CAAC,gCAAD,EACH;AACEC,IAAAA,IAAI,EAAE,MADR;AAEEC,IAAAA,MAAM,EAAE,MAFV;AAGEC,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEP,qCAA+B;AAFxB,KAHX;AAOEC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACV,MAAAA,KAAD;AAAQC,MAAAA,QAAR;AAAkB4B,MAAAA,SAAlB;AAA6BC,MAAAA;AAA7B,KAAf;AAPR,GADG,CAAL,CAUGnB,IAVH,CAUSC,GAAD,IAAO;AACX,QAAGA,GAAG,CAACC,EAAP,EACA;AACE,aAAOD,GAAG,CAACE,IAAJ,EAAP;AACD,KAHD,MAKA;AACE,YAAMC,KAAK,CAAC,oBAAD,CAAX;AACD;AACF,GAnBH,EAoBGJ,IApBH,CAoBSK,IAAD,IAAQ;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAd,IAAAA,WAAW,CAACc,IAAD,CAAX;AACAG,IAAAA,OAAO,CAACH,IAAD,CAAP;AACAI,IAAAA,QAAQ,CAACJ,IAAI,CAACK,KAAN,CAAR;AACD,GAzBH,EA0BGC,KA1BH,CA0BUC,GAAD,IACP;AACEN,IAAAA,OAAO,CAACC,GAAR,CAAYK,GAAG,CAACQ,OAAhB;AACD,GA7BH;AA8BD,CA/BD;;AAiCA,MAAMC,OAAO,GAAG,MAAK;AACnB,SAAOvB,IAAI,CAACwB,KAAL,CAAWP,YAAY,CAACQ,OAAb,CAAqB,MAArB,CAAX,CAAP;AACD,CAFD;;AAIA,MAAMf,OAAO,GAAIgB,GAAD,IAAS;AACvBT,EAAAA,YAAY,CAACU,OAAb,CAAqB,MAArB,EAA6B3B,IAAI,CAACC,SAAL,CAAeyB,GAAf,CAA7B;AACD,CAFD;;AAIA,MAAME,QAAQ,GAAG,MAAM;AACrB,SAAOX,YAAY,CAACQ,OAAb,CAAqB,OAArB,CAAP;AACD,CAFD;;AAIA,MAAMd,QAAQ,GAAIkB,GAAD,IAAS;AACxBZ,EAAAA,YAAY,CAACU,OAAb,CAAqB,OAArB,EAA8BE,GAA9B;AACD,CAFD;;AAIA,MAAMC,OAAO,GAAIrC,WAAD,IAAiB;AAC/B,MAAGwB,YAAY,CAACQ,OAAb,CAAqB,MAArB,CAAH,EACA;AACE,UAAMM,GAAG,GAAGR,OAAO,GAAGS,GAAtB;;AACA,UAAMpB,KAAK,GAAGgB,QAAQ,EAAtB;AACApB,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAkBsB,GAA9B;AACApC,IAAAA,KAAK,CAAC,iCAA+BoC,GAAhC,EACH;AACEnC,MAAAA,IAAI,EAAE,MADR;AAEEC,MAAAA,MAAM,EAAE,KAFV;AAGEC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEP,0BAAkBc,KAFX;AAGP,uCAA+B;AAHxB;AAHX,KADG,CAAL,CAUGV,IAVH,CAUSC,GAAD,IAAO;AACX,UAAGA,GAAG,CAACC,EAAP,EACA;AACE,eAAOD,GAAG,CAACE,IAAJ,EAAP;AACD,OAHD,MAKA;AACE,cAAMC,KAAK,CAAC,eAAD,CAAX;AACD;AAEF,KApBH,EAqBGJ,IArBH,CAqBSK,IAAD,IAAQ;AACZG,MAAAA,OAAO,CAACH,IAAD,CAAP;AACAd,MAAAA,WAAW,CAACc,IAAD,CAAX;AACD,KAxBH,EAyBGM,KAzBH,CAyBUC,GAAD,IAAO;AACZN,MAAAA,OAAO,CAACC,GAAR,CAAYK,GAAG,CAACQ,OAAhB;AACD,KA3BH;AA4BD;AAEF,CApCD;;AAsCA,SAAQhC,KAAR,EAAe0B,MAAf,EAAuBG,QAAvB,EAAiCI,OAAjC,EAA0Cb,OAA1C,EAAmDoB,OAAnD,EAA4DF,QAA5D","sourcesContent":["\nconst login = (email, password, updateState, setError) => {\n    fetch(\"http://localhost:8000/login\",\n    {\n      mode: \"cors\",\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\"\n      },\n      body: JSON.stringify({email, password})\n    })\n      .then((res)=>{\n        if(res.ok)\n        {\n          return res.json()\n        }\n        else\n        {\n          throw Error(\"Login Error\")\n        }\n      })\n      .then((data)=>{\n        if(data)\n        {\n          console.log(data)\n          setUser(data)\n          updateState(data)\n          setToken(data.token)\n        }\n      })\n      .catch((err)=>\n      {\n        setError(e)\n      })\n}\n\nconst logout = () => {\n  localStorage.removeItem(\"user\")\n  localStorage.removeItem(\"token\")\n}\n\nconst register = (firstName, lastName, email, password, updateState) => {\n  fetch(\"http://localhost:8000/register\",\n    {\n      mode: \"cors\",\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\"\n      },\n      body: JSON.stringify({email, password, firstName, lastName})\n    })\n    .then((res)=>{\n      if(res.ok)\n      {\n        return res.json()\n      }\n      else\n      {\n        throw Error(\"Registration Error\")\n      }\n    })\n    .then((data)=>{\n      console.log(data)\n      updateState(data)\n      setUser(data)\n      setToken(data.token)\n    })\n    .catch((err)=>\n    {\n      console.log(err.message)\n    })\n}\n\nconst getUser = () =>{\n  return JSON.parse(localStorage.getItem(\"user\"))\n}\n\nconst setUser = (usr) => {\n  localStorage.setItem(\"user\", JSON.stringify(usr))\n}\n\nconst getToken = () => {\n  return localStorage.getItem(\"token\")\n}\n\nconst setToken = (tkn) => {\n  localStorage.setItem(\"token\", tkn)\n}\n\nconst refresh = (updateState) => {\n  if(localStorage.getItem(\"user\"))\n  {\n    const uid = getUser()._id\n    const token = getToken()\n    console.log(\"Refresh user \" + uid)\n    fetch(\"http://localhost:8000/users/\"+uid,\n      {\n        mode: \"cors\",\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-access-token\": token, \n          \"Access-Control-Allow-Origin\": \"*\"\n        },\n      })\n      .then((res)=>{\n        if(res.ok)\n        {\n          return res.json()\n        }\n        else\n        {\n          throw Error(\"Refresh Error\")\n        }\n        \n      })\n      .then((data)=>{\n        setUser(data)\n        updateState(data)\n      })\n      .catch((err)=>{\n        console.log(err.message)\n      })\n  }\n\n}\n\nexport {login, logout, register, getUser, setUser, refresh, getToken}"]},"metadata":{},"sourceType":"module"}